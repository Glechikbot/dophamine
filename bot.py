# bot.py
import os
import json
import random
import pytz
import threading
from datetime import time
from flask import Flask
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    JobQueue,
)

# === –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —á–µ—Ä–µ–∑ ENV ===
TOKEN   = os.environ["BOT_TOKEN"]
CHAT_ID = os.environ["CHAT_ID"]
PORT    = int(os.environ.get("PORT", 8000))
TZ      = pytz.timezone("Europe/Kyiv")
ACTIVE_COUNT = 5

# === –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ü–∏—Ç–∞—Ç ===
def load_quotes(path="quotes.json"):
    with open(path, 'r', encoding='utf-8') as f:
        return json.load(f)

# === Job-—Ñ—É–Ω–∫—Ü—ñ—ó ===
async def send_random_quote(ctx: ContextTypes.DEFAULT_TYPE):
    quotes = load_quotes()
    await ctx.bot.send_message(chat_id=CHAT_ID, text=f"üíÄ {random.choice(quotes)}")
    # –ø–ª–∞–Ω—É—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω—É —á–µ—Ä–µ–∑ 1‚Äì3 –≥–æ–¥–∏–Ω–∏
    delay = random.randint(3600, 3*3600)
    ctx.job_queue.run_once(send_random_quote, delay)

async def rotate_quotes(ctx: ContextTypes.DEFAULT_TYPE):
    with open('master_quotes.json', 'r', encoding='utf-8') as f:
        master = json.load(f)
    new = random.sample(master, k=min(ACTIVE_COUNT, len(master)))
    with open('quotes.json', 'w', encoding='utf-8') as f:
        json.dump(new, f, ensure_ascii=False, indent=2)
    print(f"[Quotes rotated] {len(new)} items")

async def remind_todo(ctx: ContextTypes.DEFAULT_TYPE):
    await ctx.bot.send_message(chat_id=CHAT_ID, text="‚è∞ –ü–æ—Ä–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å–≤—ñ–π —Å–ø–∏—Å–æ–∫ —Å–ø—Ä–∞–≤!")

async def remind_no_reels(ctx: ContextTypes.DEFAULT_TYPE):
    await ctx.bot.send_message(chat_id=CHAT_ID, text="üö´ –ù–µ –∑–∞–ª–∏–ø–∞–π —É —Ä—ñ–ª—Å–∞—Ö, –≤–ø–µ—Ä–µ–¥ –¥–æ —Å–ø—Ä–∞–≤!")

async def remind_both(ctx: ContextTypes.DEFAULT_TYPE):
    await ctx.bot.send_message(chat_id=CHAT_ID, text="üîÉ –ü–µ—Ä–µ–≤—ñ—Ä —Å–ø—Ä–∞–≤–∏ —Ç–∞ –Ω–µ –∑–∞–±—É–≤–∞–π –ø—Ä–æ —Ä—ñ–ª—Å–∏!")

async def remind_bedtime(ctx: ContextTypes.DEFAULT_TYPE):
    await ctx.bot.send_message(chat_id=CHAT_ID, text="üåô –ß–∞—Å –≥–æ—Ç—É–≤–∞—Ç–∏—Å—è –¥–æ —Å–Ω—É. –í–∏–º–∏–∫–∞–π –µ–∫—Ä–∞–Ω, —Ä–æ–±–∏ —Ä–æ–∑—Ç—è–∂–∫—É.")

async def ping(update: ContextTypes.DEFAULT_TYPE, ctx: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ –ë–æ—Ç –ø—Ä–∞—Ü—é—î!")

# === –°—Ç–∞—Ä—Ç –±–æ—Ç–∞ –≤ background ===
def run_bot():
    app = ApplicationBuilder().token(TOKEN).build()
    jq: JobQueue = app.job_queue

    # –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è /ping
    app.add_handler(CommandHandler("ping", ping))

    # —Ä–æ—Ç–∞—Ü—ñ—è —Ü–∏—Ç–∞—Ç –æ–¥—Ä–∞–∑—É –π –ø–æ—Ç—ñ–º –∫–æ–∂–Ω—ñ 3 –¥–Ω—ñ
    jq.run_once(rotate_quotes, when=0)
    jq.run_repeating(rotate_quotes, interval=3*24*3600)

    # —Ä–∞–Ω–¥–æ–º–Ω–∞ —Ü–∏—Ç–∞—Ç–∞ —á–µ—Ä–µ–∑ 30 —Ö–≤, –ø–æ—Ç—ñ–º –ª–∞–Ω—Ü—é–∂–æ–∫
    jq.run_once(send_random_quote, when=30*60)

    # —Ñ—ñ–∫—Å–æ–≤–∞–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
    jq.run_daily(remind_todo,     time(hour=7,  minute=30, tzinfo=TZ))
    jq.run_daily(remind_no_reels, time(hour=8,  minute=0,  tzinfo=TZ))
    jq.run_daily(remind_both,     time(hour=14, minute=0,  tzinfo=TZ))
    jq.run_daily(remind_bedtime,  time(hour=0,  minute=0,  tzinfo=TZ))

    app.run_polling()

# === HTTP-health-check ===
flask_app = Flask(__name__)

@flask_app.route("/")
def health():
    return "OK", 200

if __name__ == "__main__":
    threading.Thread(target=run_bot, daemon=True).start()
    flask_app.run(host="0.0.0.0", port=PORT)
